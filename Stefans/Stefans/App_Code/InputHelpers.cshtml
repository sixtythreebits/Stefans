@using System.Linq.Expressions
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Stefans.Reusable
@using SelectListItem = System.Web.Mvc.SelectListItem

@functions
{
    static HelperResult RenderInput<TModel, TProperty>(HtmlHelper<TModel> Html, string Caption, Expression<Func<TModel, TProperty>> PropExpression, MvcHtmlString Input)
    {
        return RenderInput(Caption, Html.NameFor(PropExpression), Input, Html.HasPropertyError(PropExpression), Html.ValidationMessageFor(PropExpression));
    }

    public static HelperResult RenderTextBox<TModel, TProperty>(HtmlHelper<TModel> Html, string Caption, Expression<Func<TModel, TProperty>> PropExpression)
    {
        return RenderInput(Html, Caption, PropExpression, Html.TextBoxFor(PropExpression, new { @class = "form-control" }));
    }
    
    public static HelperResult RenderNumericTextBox<TModel, TProperty>(HtmlHelper<TModel> Html, string Caption, Expression<Func<TModel, TProperty>> PropExpression)
    {
        return RenderInput(Html, Caption, PropExpression, Html.TextBoxFor(PropExpression, new { @class = "form-control", type = "number", step = "any", min = "0", max="100000" }));
    }

    public static HelperResult RenderTextArea<TModel, TProperty>(HtmlHelper<TModel> Html, string Caption, Expression<Func<TModel, TProperty>> PropExpression)
    {
        return RenderInput(Html, Caption, PropExpression, Html.TextAreaFor(PropExpression, new { @class = "form-control" }));
    }

    public static HelperResult RenderCheckBox<TModel>(HtmlHelper<TModel> Html, string Caption, Expression<Func<TModel, bool>> PropExpression)
    {
        return RenderInput(Html, Caption, PropExpression, Html.CheckBoxFor(PropExpression));
    }

    public static HelperResult RenderDropDown<TModel, TProperty>(HtmlHelper<TModel> Html, string Caption, Expression<Func<TModel, TProperty>> PropExpression, IEnumerable<SelectListItem> SelectList)
    {
        return RenderInput(Html, Caption, PropExpression, Html.DropDownListFor(PropExpression, SelectList, new { @class = "form-control" }));
    }
}

@helper RenderInput(string Label, MvcHtmlString PropName, MvcHtmlString Input, bool HasError, MvcHtmlString ValidationMessage)
{
    <div class="form-group @( HasError ? "has-error" : "" )">
        <label class="control-label" for="@PropName">
            @Label
        </label>
        <div>
            @Input
        </div>
        <div>
            @ValidationMessage
        </div>
    </div>
}