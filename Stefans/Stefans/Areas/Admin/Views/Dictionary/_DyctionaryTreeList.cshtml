@using System.Web.UI.WebControls

@section CSS {
    @Html.DevExpress().GetStyleSheets(new StyleSheet { ExtensionSuite = ExtensionSuite.TreeList })
}
@section JS{
    <!-- The DevExpress ASP.NET MVC Extensions' scripts -->
    @Html.DevExpress().GetScripts(            
            new Script { ExtensionSuite = ExtensionSuite.TreeList }            
          )
}

@model  IEnumerable<Core.Dictionary>

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

    var treeList = Html.DevExpress().TreeList(
            settings =>
            {
                settings.Name = "treeList";
                settings.CallbackRouteValues = new { Controller = "Dictionary", Action = "DictionaryCallback" };

                settings.AutoGenerateColumns = false;
                settings.Width = Unit.Percentage(100);

                settings.KeyFieldName = "ID";
                settings.ParentFieldName = "ParentID";

                settings.Settings.ScrollableHeight = 550;
                settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;

                settings.CommandColumn.Visible = true;
                settings.CommandColumn.VisibleIndex = int.MaxValue;
                settings.CommandColumn.ShowNewButtonInHeader = true;
                settings.CommandColumn.NewButton.Visible = true;
                settings.CommandColumn.DeleteButton.Visible = true;
                settings.CommandColumn.EditButton.Visible = true;

                settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Both;
                settings.SettingsBehavior.ExpandCollapseAction = TreeListExpandCollapseAction.NodeDblClick;

                settings.SettingsEditing.AddNewNodeRouteValues = new { Controller = "Dictionary", Action = "DictionaryAdd" };
                settings.SettingsEditing.UpdateNodeRouteValues = new { Controller = "Dictionary", Action = "DictionaryUpdate" };
                
                settings.SettingsEditing.DeleteNodeRouteValues = new { Controller = "Dictionary", Action = "DictionaryDelete" };
                settings.SettingsEditing.ConfirmDelete = true;

                settings.SettingsEditing.ShowModelErrorsForEditors = true;

               
                settings.SettingsBehavior.AllowFocusedNode = true;
                settings.Styles.FocusedNode.BackColor = System.Drawing.Color.LightBlue;        
                         

                settings.PreRender = (sender, e) =>
                {
                    MVCxTreeList treeListControl = (MVCxTreeList)sender;
                    treeListControl.ExpandToLevel(2);                    
                };

                
                settings.Columns.Add("Caption");
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Caption1";
                    column.Caption = "Small Caption";
                    column.Width = 100;

                });
                
                settings.Columns.Add(column => {
                    column.FieldName = "CodeVal";

                    column.ColumnType = MVCxTreeListColumnType.SpinEdit;
                    var spinEditProperties = column.PropertiesEdit as SpinEditProperties;
                    spinEditProperties.NumberType = SpinEditNumberType.Integer;
                    spinEditProperties.MinValue = 0;
                    spinEditProperties.MaxValue = 10000;
                    column.Width = 70;
                });
                
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DictionaryCode";

                    column.ColumnType = MVCxTreeListColumnType.SpinEdit;
                    var spinEditProperties = column.PropertiesEdit as SpinEditProperties;
                    spinEditProperties.NumberType = SpinEditNumberType.Integer;
                    spinEditProperties.MinValue = 0;
                    spinEditProperties.MaxValue = 10000;
                    column.Width = 70;
                });
            }
        );
    if (ViewData["EditNodeError"] != null)
    {
        treeList.SetEditErrorText((string)ViewData["EditNodeError"]);
    }
}

@treeList.Bind(Model).GetHtml()

